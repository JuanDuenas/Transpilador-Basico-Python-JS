# Generated from Python3Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,197,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,5,8,99,
        8,8,10,8,12,8,102,9,8,1,9,4,9,105,8,9,11,9,12,9,106,1,9,1,9,4,9,
        111,8,9,11,9,12,9,112,3,9,115,8,9,1,10,1,10,5,10,119,8,10,10,10,
        12,10,122,9,10,1,10,1,10,1,10,5,10,127,8,10,10,10,12,10,130,9,10,
        1,10,3,10,133,8,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
        1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,3,27,172,8,27,1,27,1,27,4,27,176,8,27,11,27,12,27,177,
        1,27,1,27,1,28,4,28,183,8,28,11,28,12,28,184,1,28,1,28,1,29,1,29,
        5,29,191,8,29,10,29,12,29,194,9,29,1,29,1,29,0,0,30,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,10,10,13,13,
        39,39,2,0,9,9,32,32,2,0,10,10,13,13,208,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,65,1,0,0,0,5,
        68,1,0,0,0,7,73,1,0,0,0,9,78,1,0,0,0,11,85,1,0,0,0,13,89,1,0,0,0,
        15,92,1,0,0,0,17,96,1,0,0,0,19,104,1,0,0,0,21,132,1,0,0,0,23,134,
        1,0,0,0,25,136,1,0,0,0,27,138,1,0,0,0,29,140,1,0,0,0,31,142,1,0,
        0,0,33,144,1,0,0,0,35,146,1,0,0,0,37,148,1,0,0,0,39,150,1,0,0,0,
        41,153,1,0,0,0,43,156,1,0,0,0,45,159,1,0,0,0,47,162,1,0,0,0,49,164,
        1,0,0,0,51,166,1,0,0,0,53,168,1,0,0,0,55,175,1,0,0,0,57,182,1,0,
        0,0,59,188,1,0,0,0,61,62,5,100,0,0,62,63,5,101,0,0,63,64,5,102,0,
        0,64,2,1,0,0,0,65,66,5,105,0,0,66,67,5,102,0,0,67,4,1,0,0,0,68,69,
        5,101,0,0,69,70,5,108,0,0,70,71,5,105,0,0,71,72,5,102,0,0,72,6,1,
        0,0,0,73,74,5,101,0,0,74,75,5,108,0,0,75,76,5,115,0,0,76,77,5,101,
        0,0,77,8,1,0,0,0,78,79,5,114,0,0,79,80,5,101,0,0,80,81,5,116,0,0,
        81,82,5,117,0,0,82,83,5,114,0,0,83,84,5,110,0,0,84,10,1,0,0,0,85,
        86,5,97,0,0,86,87,5,110,0,0,87,88,5,100,0,0,88,12,1,0,0,0,89,90,
        5,111,0,0,90,91,5,114,0,0,91,14,1,0,0,0,92,93,5,110,0,0,93,94,5,
        111,0,0,94,95,5,116,0,0,95,16,1,0,0,0,96,100,7,0,0,0,97,99,7,1,0,
        0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,
        18,1,0,0,0,102,100,1,0,0,0,103,105,7,2,0,0,104,103,1,0,0,0,105,106,
        1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,114,1,0,0,0,108,110,
        5,46,0,0,109,111,7,2,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,110,
        1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,108,1,0,0,0,114,115,
        1,0,0,0,115,20,1,0,0,0,116,120,5,34,0,0,117,119,8,3,0,0,118,117,
        1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,123,
        1,0,0,0,122,120,1,0,0,0,123,133,5,34,0,0,124,128,5,39,0,0,125,127,
        8,4,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,
        1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,133,5,39,0,0,132,116,
        1,0,0,0,132,124,1,0,0,0,133,22,1,0,0,0,134,135,5,43,0,0,135,24,1,
        0,0,0,136,137,5,45,0,0,137,26,1,0,0,0,138,139,5,42,0,0,139,28,1,
        0,0,0,140,141,5,47,0,0,141,30,1,0,0,0,142,143,5,37,0,0,143,32,1,
        0,0,0,144,145,5,61,0,0,145,34,1,0,0,0,146,147,5,60,0,0,147,36,1,
        0,0,0,148,149,5,62,0,0,149,38,1,0,0,0,150,151,5,61,0,0,151,152,5,
        61,0,0,152,40,1,0,0,0,153,154,5,62,0,0,154,155,5,61,0,0,155,42,1,
        0,0,0,156,157,5,60,0,0,157,158,5,61,0,0,158,44,1,0,0,0,159,160,5,
        33,0,0,160,161,5,61,0,0,161,46,1,0,0,0,162,163,5,40,0,0,163,48,1,
        0,0,0,164,165,5,41,0,0,165,50,1,0,0,0,166,167,5,58,0,0,167,52,1,
        0,0,0,168,169,5,44,0,0,169,54,1,0,0,0,170,172,5,13,0,0,171,170,1,
        0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,173,176,5,10,0,0,174,176,5,
        13,0,0,175,171,1,0,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,
        0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,6,27,0,0,180,56,1,
        0,0,0,181,183,7,5,0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,
        0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,6,28,0,0,187,58,1,
        0,0,0,188,192,5,35,0,0,189,191,8,6,0,0,190,189,1,0,0,0,191,194,1,
        0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,
        0,0,0,195,196,6,29,0,0,196,60,1,0,0,0,13,0,100,106,112,114,120,128,
        132,171,175,177,184,192,1,0,1,0
    ]

class Python3Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEF = 1
    IF = 2
    ELIF = 3
    ELSE = 4
    RETURN = 5
    AND = 6
    OR = 7
    NOT = 8
    NAME = 9
    NUMBER = 10
    STRING = 11
    PLUS = 12
    MINUS = 13
    STAR = 14
    DIV = 15
    MOD = 16
    ASSIGN = 17
    LESS_THAN = 18
    GREATER_THAN = 19
    EQUALS = 20
    GT_EQ = 21
    LT_EQ = 22
    NOT_EQ = 23
    LPAREN = 24
    RPAREN = 25
    COLON = 26
    COMMA = 27
    NEWLINE = 28
    WS = 29
    COMMENT = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'if'", "'elif'", "'else'", "'return'", "'and'", "'or'", 
            "'not'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'<'", "'>'", 
            "'=='", "'>='", "'<='", "'!='", "'('", "')'", "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "IF", "ELIF", "ELSE", "RETURN", "AND", "OR", "NOT", "NAME", 
            "NUMBER", "STRING", "PLUS", "MINUS", "STAR", "DIV", "MOD", "ASSIGN", 
            "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ", 
            "LPAREN", "RPAREN", "COLON", "COMMA", "NEWLINE", "WS", "COMMENT" ]

    ruleNames = [ "DEF", "IF", "ELIF", "ELSE", "RETURN", "AND", "OR", "NOT", 
                  "NAME", "NUMBER", "STRING", "PLUS", "MINUS", "STAR", "DIV", 
                  "MOD", "ASSIGN", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                  "GT_EQ", "LT_EQ", "NOT_EQ", "LPAREN", "RPAREN", "COLON", 
                  "COMMA", "NEWLINE", "WS", "COMMENT" ]

    grammarFileName = "Python3Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


